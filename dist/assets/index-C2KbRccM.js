(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))t(a);new MutationObserver(a=>{for(const o of a)if(o.type==="childList")for(const s of o.addedNodes)s.tagName==="LINK"&&s.rel==="modulepreload"&&t(s)}).observe(document,{childList:!0,subtree:!0});function n(a){const o={};return a.integrity&&(o.integrity=a.integrity),a.referrerPolicy&&(o.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?o.credentials="include":a.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function t(a){if(a.ep)return;a.ep=!0;const o=n(a);fetch(a.href,o)}})();const $=52/12,O=12,B=["#64ffda","#90caf9","#ffd54f","#ff8a80","#ce93d8","#80cbc4"],_={seasonLengthMonths:5,sargassumVolumeM3:7183.15,workDaysPerWeek:6,workHoursPerDay:5,trailerCapacityM3:1.982179261,timePerWorkerLoadM3Minutes:25,atvSpeedKmh:3,beachLengthM:600,loadTransferTimeMinutes:11},K={minutesPerSecond:O},U=[{key:"seasonLengthMonths",label:"Length of season (months)",min:1,max:12,step:.1,section:"season"},{key:"sargassumVolumeM3",label:"Estimated Sargassum volume (m³)",min:0,max:2e4,step:10,section:"season"},{key:"workDaysPerWeek",label:"Working days per week",min:1,max:7,step:1,section:"season"},{key:"workHoursPerDay",label:"Working hours per day",min:1,max:24,step:.5,section:"season"},{key:"trailerCapacityM3",label:"Trailer capacity (m³)",min:.1,max:5,step:.01,section:"labor"},{key:"timePerWorkerLoadM3Minutes",label:"Time to load 1 m³ (minutes)",min:1,max:60,step:1,section:"labor"},{key:"atvSpeedKmh",label:"ATV speed (km/h)",min:0,max:15,step:.1,section:"atv"},{key:"beachLengthM",label:"Beach length (m)",min:60,max:1500,step:10,section:"atv"},{key:"loadTransferTimeMinutes",label:"Load transfer wait (minutes)",min:0,max:60,step:1,section:"atv"}],z=[{key:"avgDailyRemoval",label:"Average daily removal (m³)",format:e=>y(e,{maximumFractionDigits:2})},{key:"avgHourlyRemoval",label:"Average hourly removal (m³)",format:e=>y(e,{maximumFractionDigits:2})},{key:"trailersPerDay",label:"Trailer loads per day",format:e=>y(e,{maximumFractionDigits:2})},{key:"timeWorkerLoadHours",label:"Worker hours to load trailers (per day)",format:e=>y(e,{maximumFractionDigits:2})},{key:"requiredBeachWorkers",label:"Beach workers required (load crew)",format:e=>y(e,{maximumFractionDigits:2})},{key:"timeToLoadTrailerMinutes",label:"Time to load trailer (minutes)",format:e=>y(e,{maximumFractionDigits:2})},{key:"timeToLoadingAreaMinutes",label:"Travel to loading area (minutes)",format:e=>y(e,{maximumFractionDigits:2})},{key:"totalAtvTimePerLoadMinutes",label:"ATV cycle time per load (minutes)",format:e=>y(e,{maximumFractionDigits:2})},{key:"timePerAtvHours",label:"ATV duty time (hours/day)",format:e=>y(e,{maximumFractionDigits:2})},{key:"requiredAtvs",label:"Required # of ATVs",format:e=>y(e,{maximumFractionDigits:2})},{key:"requiredAtvDrivers",label:"Required # of ATV drivers",format:e=>y(e,{maximumFractionDigits:2})},{key:"requiredUnloadWorkers",label:"Required # of unload workers",format:e=>y(e,{maximumFractionDigits:2})},{key:"integerLoads",label:"Loads simulated today",format:e=>y(e,{maximumFractionDigits:0})},{key:"integerAtvs",label:"ATVs in rotation",format:e=>y(e,{maximumFractionDigits:0})},{key:"totalMinutes",label:"Day cycle duration (minutes)",format:e=>y(e,{maximumFractionDigits:1}),note:"Full rotation for busiest ATV within the day"}];function y(e,l={}){return Number.isFinite(e)?new Intl.NumberFormat("en-US",{maximumFractionDigits:2,minimumFractionDigits:0,...l}).format(e):"—"}function G(e){const l=e.seasonLengthMonths*$,n=l*e.workDaysPerWeek,t=n>0?e.sargassumVolumeM3/n:0,a=e.workHoursPerDay>0?t/e.workHoursPerDay:0,o=e.trailerCapacityM3>0?t/e.trailerCapacityM3:0,d=e.timePerWorkerLoadM3Minutes*t/60,v=e.workHoursPerDay>0?d/e.workHoursPerDay:0,S=v>0?e.trailerCapacityM3*e.timePerWorkerLoadM3Minutes/v:0,g=e.atvSpeedKmh*1e3/60,p=e.beachLengthM/2,M=g>0?p/g:0,k=M,A=M+S+k,T=A*o/60,w=e.workHoursPerDay>0?T/e.workHoursPerDay:0,q=w,F=e.workHoursPerDay>0?o*S/60/e.workHoursPerDay:0,c=Math.max(1,Math.round(o)),u=Math.max(1,Math.ceil(w));return{workingWeeks:l,workingDaysSeason:n,avgDailyRemoval:t,avgHourlyRemoval:a,trailersPerDay:o,timeWorkerLoadHours:d,requiredBeachWorkers:v,timeToLoadTrailerMinutes:S,timeToLoadingAreaMinutes:M,totalAtvTimePerLoadMinutes:A,timePerAtvHours:T,requiredAtvs:w,requiredAtvDrivers:q,requiredUnloadWorkers:F,integerLoads:c,integerAtvs:u}}function j(e,l){const n=l.integerLoads,t=l.integerAtvs,a=[],o=[],s=Array.from({length:t},()=>[]),d=Array.from({length:t},()=>0),v=Math.max(0,e.loadTransferTimeMinutes??0);if(n<=0||t<=0)return{loadMarkers:a,segmentsByAtv:s,totalMinutes:0,numLoads:0,numAtvs:t,loadStates:o};const S=e.beachLengthM/n,g=l.timeToLoadTrailerMinutes,p=e.atvSpeedKmh>0?e.atvSpeedKmh*1e3/60:0;let M=0,k=0;const A=Array.from({length:n},(c,u)=>{const r=u*S,m=(u+1)*S,f=r+S/2;return{loadIndex:u+1,startPosM:r,endPosM:m,centerPosM:f}});a.push(...A.map(c=>c.centerPosM).sort((c,u)=>c-u));const T=[];let w=0,q=n-1,F=!0;for(;w<=q;)F?(T.push({...A[w],crew:"West crew"}),w+=1):(T.push({...A[q],crew:"East crew"}),q-=1),F=!F;return T.length&&n%2===1&&(T[T.length-1].crew="Both crews"),T.forEach(c=>{const u=c.centerPosM,r=c.startPosM,m=c.endPosM,f=Math.min(u,5),h=p>0?u/p:0,L=p>0?Math.max(u-f,0)/p:0,D=p>0?f/p:0;let i=0,P=d[0];for(let C=1;C<t;C+=1)d[C]<P-Number.EPSILON&&(P=d[C],i=C);const x=d[i],b=x+h,I=b+g,E=I+L,N=E+D;let W=0,V=N;V<M&&(W=M-V,V=M);const R=V+v,H=C=>{s[i].push(C),k=Math.max(k,C.endMin)};H({atvId:i,loadId:c.loadIndex,phase:"outbound",startMin:x,endMin:b,startPosM:0,endPosM:u}),H({atvId:i,loadId:c.loadIndex,phase:"loading",startMin:b,endMin:I,startPosM:u,endPosM:u}),L>0?H({atvId:i,loadId:c.loadIndex,phase:"return",startMin:I,endMin:E,startPosM:u,endPosM:f}):H({atvId:i,loadId:c.loadIndex,phase:"return",startMin:I,endMin:I,startPosM:u,endPosM:f}),W>0&&H({atvId:i,loadId:c.loadIndex,phase:"hold",startMin:E,endMin:E+W,startPosM:f,endPosM:f}),H({atvId:i,loadId:c.loadIndex,phase:"approach",startMin:E+W,endMin:V,startPosM:f,endPosM:0}),H({atvId:i,loadId:c.loadIndex,phase:"transfer",startMin:V,endMin:R,startPosM:0,endPosM:0}),d[i]=R,M=R,o.push({startPosM:r,endPosM:m,arrivalMin:b,cleanedAtMinute:I,crew:c.crew,loadId:c.loadIndex})}),{loadMarkers:a,segmentsByAtv:s.map(c=>c.sort((u,r)=>u.startMin-r.startMin)),totalMinutes:k,numLoads:n,numAtvs:t,loadStates:o}}function J(){const e=document.querySelector("#app");return e.innerHTML=`
    <section class="controls">
      <div class="control-header">
        <h1>HMB Beach Cleanup Model</h1>
        <p>Set the season-scale inputs from the spreadsheet; the animation shows how one workday plays out with those assumptions.</p>
      </div>
      <div class="controls-groups">
        <div class="control-group">
          <h2>Season Parameters</h2>
          <div class="input-grid" data-section="season"></div>
        </div>
        <div class="control-group">
          <h2>Trailer &amp; Labor</h2>
          <div class="input-grid" data-section="labor"></div>
        </div>
        <div class="control-group">
          <h2>ATV Operations</h2>
          <div class="input-grid" data-section="atv"></div>
        </div>
      </div>
      <div class="speed-control">
        <label for="speedSlider">Visualization speed</label>
        <div class="speed-slider">
          <input type="range" id="speedSlider" min="1" max="60" step="1" />
          <span id="speedValue"></span>
        </div>
      </div>
      <div class="derived-section" id="derivedSection">
        <div class="derived-header">
          <h2>Derived Metrics</h2>
          <button type="button" class="toggle-derived" id="toggleDerived">Hide metrics</button>
        </div>
        <ul class="metrics-list" id="derivedMetrics"></ul>
      </div>
      <div class="status" id="status"></div>
    </section>
    <section class="simulation">
      <div class="canvas-container">
        <canvas id="beachCanvas" width="960" height="520"></canvas>
        <div class="overlay">
          <span id="timeLabel">00:00</span>
          <span id="detailsLabel"></span>
        </div>
      </div>
    </section>
  `,{canvas:document.querySelector("#beachCanvas"),derivedList:document.querySelector("#derivedMetrics"),status:document.querySelector("#status"),timeLabel:document.querySelector("#timeLabel"),detailsLabel:document.querySelector("#detailsLabel"),derivedSection:document.querySelector("#derivedSection"),derivedToggle:document.querySelector("#toggleDerived"),speedSlider:document.querySelector("#speedSlider"),speedValue:document.querySelector("#speedValue")}}function Q(e,l){U.forEach(n=>{const t=document.querySelector(`[data-section="${n.section}"]`),a=document.createElement("div");a.className="field";const o=document.createElement("label");o.textContent=n.label;const s=document.createElement("input");s.type="number",s.value=e[n.key],n.min!==void 0&&(s.min=String(n.min)),n.max!==void 0&&(s.max=String(n.max)),n.step!==void 0&&(s.step=String(n.step)),s.addEventListener("input",()=>{const d=Number(s.value);Number.isFinite(d)&&l(n.key,d)}),a.append(o,s),t.append(a)})}function X(e,l){const n=document.querySelector("#speedSlider"),t=document.querySelector("#speedValue");if(!n||!t)return;const a=o=>{t.textContent=`${o.toFixed(0)} min/sec`,l(o)};n.value=String(e.minutesPerSecond),a(e.minutesPerSecond),n.addEventListener("input",()=>{const o=Number(n.value);!Number.isFinite(o)||o<=0||(e.minutesPerSecond=o,a(o))})}function Y(e,l,n){e.innerHTML="",z.forEach(t=>{const a=t.key==="totalMinutes"?n.totalMinutes:l[t.key],o=document.createElement("li");o.className="metric-card";const s=document.createElement("span");s.className="label",s.textContent=t.label;const d=document.createElement("span");if(d.className="value",d.textContent=t.format?t.format(a):String(a),o.append(s,d),t.note){const v=document.createElement("span");v.className="note",v.textContent=t.note,o.append(v)}e.append(o)})}function Z(e,l,n){const t=e.getContext("2d"),a=e.width,o=e.height,s=70;let d={loadMarkers:[],loadStates:[],segmentsByAtv:[],totalMinutes:1,beachLength:_.beachLengthM},v=null,S=O;const g=o*.3,p=o*.7;function M(r,m){d={...r,beachLength:m.beachLengthM},{...m},v=null}function k(r){S=r}function A(r){const m=Math.floor(r/60),f=Math.floor(r%60),h=Math.floor(r%1*60),L=`${String(m).padStart(2,"0")}:${String(f).padStart(2,"0")}:${String(h).padStart(2,"0")}`;l.textContent=`Sim time ${L}`}function T(){t.fillStyle="#0f2034",t.fillRect(0,0,a,o);const r=t.createLinearGradient(0,g,0,p);r.addColorStop(0,"rgba(230, 254, 255, 0.08)"),r.addColorStop(.5,"rgba(110, 192, 230, 0.18)"),r.addColorStop(1,"rgba(255, 255, 255, 0.05)"),t.fillStyle=r,t.fillRect(s,g,a-s*2,p-g),t.strokeStyle="rgba(255, 255, 255, 0.25)",t.lineWidth=2,t.beginPath(),t.moveTo(s,p),t.lineTo(a-s,p),t.stroke()}function w(r){const m=a-s*2,f=p-g;d.loadStates.forEach(h=>{const L=s+h.startPosM/d.beachLength*m,D=s+h.endPosM/d.beachLength*m,i=h.arrivalMin,P=h.cleanedAtMinute;if(P<=0||r>=P)return;let x=1;if(r>i){const I=Math.max(P-i,.01),E=Math.min(Math.max((r-i)/I,0),1);x=Math.max(0,1-E)}t.save(),t.globalAlpha=x;const b=t.createLinearGradient(L,g,D,p);b.addColorStop(0,"rgba(121, 85, 72, 0.92)"),b.addColorStop(.5,"rgba(93, 64, 55, 0.95)"),b.addColorStop(1,"rgba(121, 85, 72, 0.92)"),t.fillStyle=b,t.fillRect(L,g,D-L,f),t.restore()})}function q(r,m){if(!r.length)return{position:0,phase:"idle",loadId:null};const f=r[r.length-1].endMin;if(f===0)return{position:0,phase:"idle",loadId:null};let h=m%f;for(let D=0;D<r.length;D+=1){const i=r[D];if(h<i.startMin)return{position:i.startPosM,phase:"idle",loadId:i.loadId};if(h<=i.endMin||i.endMin===i.startMin){const P=i.endMin-i.startMin,x=P>0?(h-i.startMin)/P:1;return{position:i.startPosM+(i.endPosM-i.startPosM)*x,phase:i.phase,loadId:i.loadId}}}const L=r[r.length-1];return{position:L.endPosM,phase:"idle",loadId:L.loadId}}function F(){t.strokeStyle="rgba(255, 255, 255, 0.12)",t.lineWidth=1,t.setLineDash([6,8]),d.loadMarkers.forEach(r=>{const m=s+r/d.beachLength*(a-s*2);t.beginPath(),t.moveTo(m,g),t.lineTo(m,p),t.stroke()}),t.setLineDash([])}function c(r){const m=[];d.segmentsByAtv.forEach((f,h)=>{const{position:L,phase:D,loadId:i}=q(f,r),P=B[h%B.length],x=s+L/d.beachLength*(a-s*2),b=p-30-h*18;t.fillStyle=P,t.beginPath(),t.arc(x,b,9,0,Math.PI*2),t.fill(),t.fillStyle="rgba(15, 32, 52, 0.8)",t.beginPath(),t.arc(x,b,5,0,Math.PI*2),t.fill(),t.fillStyle=P,t.font='12px "Inter", sans-serif',t.fillText(`ATV ${h+1}`,x-20,b+20);const E=(i?d.loadStates.find(N=>N.loadId===i):void 0)?.crew??"Crew";m.push(`ATV ${h+1}: ${D} load ${i??"—"} (${E})`)}),n.textContent=m.join("  •  ")}function u(r){v||(v=r);const m=(r-v)/1e3,f=Math.max(d.totalMinutes,1),h=m*S%f;T(),w(h),F(),c(h),A(h),requestAnimationFrame(u)}return requestAnimationFrame(u),{update:M,updateSpeed:k}}function ee(e,l,n){if(l.atvSpeedKmh<=0){e.textContent="Increase ATV speed above zero to animate the transport cycle.";return}if(n.trailersPerDay<=0||n.requiredAtvs<=0){e.textContent="Adjust inputs to produce a non-zero workload for ATVs.";return}e.textContent=""}function te(){const e={..._},l={...K},{canvas:n,derivedList:t,status:a,timeLabel:o,detailsLabel:s,derivedSection:d,derivedToggle:v}=J(),S=Z(n,o,s);let g=!1;function p(){const M=G(e),k=j(e,M),A={totalMinutes:k.totalMinutes};Y(t,M,A),ee(a,e,M),S.update(k,e)}Q(e,(M,k)=>{e[M]=k,p()}),X(l,M=>{S.updateSpeed(M)}),v.addEventListener("click",()=>{g=!g,d.classList.toggle("collapsed",g),v.textContent=g?"Show metrics":"Hide metrics"}),p()}te();
