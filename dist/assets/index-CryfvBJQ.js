(function(){const l=document.createElement("link").relList;if(l&&l.supports&&l.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))e(a);new MutationObserver(a=>{for(const i of a)if(i.type==="childList")for(const o of i.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&e(o)}).observe(document,{childList:!0,subtree:!0});function r(a){const i={};return a.integrity&&(i.integrity=a.integrity),a.referrerPolicy&&(i.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?i.credentials="include":a.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function e(a){if(a.ep)return;a.ep=!0;const i=r(a);fetch(a.href,i)}})();const G=52/12,K=1,U=["#64ffda","#90caf9","#ffd54f","#ff8a80","#ce93d8","#80cbc4"],_={seasonLengthMonths:5,sargassumVolumeM3:7183.15,workDaysPerWeek:6,workHoursPerDay:5,trailerCapacityM3:2,timePerWorkerLoadM3Minutes:25,atvSpeedKmh:3,beachLengthM:600,loadTransferTimeMinutes:11},j={minutesPerSecond:K,atvOverrideEnabled:!1,atvOverrideCount:null},z=[{key:"seasonLengthMonths",label:"Length of season (months)",min:1,max:12,step:.1,section:"season"},{key:"sargassumVolumeM3",label:"Estimated Sargassum volume (m³)",min:0,max:2e4,step:10,section:"season"},{key:"workDaysPerWeek",label:"Working days per week",min:1,max:7,step:1,section:"season"},{key:"workHoursPerDay",label:"Working hours per day",min:1,max:24,step:.5,section:"season"},{key:"trailerCapacityM3",label:"Trailer capacity (m³)",min:.1,max:5,step:.1,section:"labor"},{key:"timePerWorkerLoadM3Minutes",label:"Time to load 1 m³ per worker (minutes)",min:1,max:60,step:1,section:"labor"},{key:"atvSpeedKmh",label:"ATV speed (km/h)",min:0,max:15,step:.1,section:"atv"},{key:"beachLengthM",label:"Beach length (m)",min:60,max:1500,step:10,section:"atv"},{key:"loadTransferTimeMinutes",label:"Load transfer wait (minutes)",min:0,max:60,step:1,section:"atv"}],Y=[{key:"avgDailyRemoval",label:"Average daily removal (m³)",format:t=>M(t,{maximumFractionDigits:2})},{key:"avgHourlyRemoval",label:"Average hourly removal (m³)",format:t=>M(t,{maximumFractionDigits:2})},{key:"trailersPerDay",label:"Trailer loads per day",format:t=>M(t,{maximumFractionDigits:2})},{key:"timeWorkerLoadHours",label:"Worker hours to load trailers (per day)",format:t=>M(t,{maximumFractionDigits:2})},{key:"requiredBeachWorkers",label:"Beach workers required (load crew)",format:t=>M(t,{maximumFractionDigits:2})},{key:"timeToLoadTrailerMinutes",label:"Time to load trailer (minutes)",format:t=>M(t,{maximumFractionDigits:2})},{key:"timeToLoadingAreaMinutes",label:"Travel to loading area (minutes)",format:t=>M(t,{maximumFractionDigits:2})},{key:"totalAtvTimePerLoadMinutes",label:"ATV cycle time per load (minutes)",format:t=>M(t,{maximumFractionDigits:2})},{key:"timePerAtvHours",label:"ATV duty time (hours/day)",format:t=>M(t,{maximumFractionDigits:2})},{key:"requiredAtvs",label:"Required # of ATVs",format:t=>M(t,{maximumFractionDigits:2})},{key:"requiredAtvDrivers",label:"Required # of ATV drivers",format:t=>M(t,{maximumFractionDigits:2})},{key:"requiredUnloadWorkers",label:"Required # of unload workers",format:t=>M(t,{maximumFractionDigits:2})},{key:"integerLoads",label:"Loads simulated today",format:t=>M(t,{maximumFractionDigits:0})},{key:"integerAtvs",label:"ATVs in rotation",format:t=>M(t,{maximumFractionDigits:0})},{key:"totalMinutes",label:"Day cycle duration (minutes)",format:t=>M(t,{maximumFractionDigits:1}),note:"Full rotation for busiest ATV within the day"}];function M(t,l={}){return Number.isFinite(t)?new Intl.NumberFormat("en-US",{maximumFractionDigits:2,minimumFractionDigits:0,...l}).format(t):"—"}function J(t){const l=t.seasonLengthMonths*G,r=l*t.workDaysPerWeek,e=r>0?t.sargassumVolumeM3/r:0,a=t.workHoursPerDay>0?e/t.workHoursPerDay:0,i=t.trailerCapacityM3>0?e/t.trailerCapacityM3:0,s=t.timePerWorkerLoadM3Minutes*e/60,d=t.workHoursPerDay>0?s/t.workHoursPerDay:0,v=d>0?t.trailerCapacityM3*t.timePerWorkerLoadM3Minutes/d:0,L=t.atvSpeedKmh*1e3/60,T=t.beachLengthM/2,f=L>0?T/L:0,q=f,P=f+v+q,y=P*i/60,E=t.workHoursPerDay>0?y/t.workHoursPerDay:0,D=E,w=t.workHoursPerDay>0?i*v/60/t.workHoursPerDay:0,O=Math.max(1,Math.round(i)),N=Math.max(1,Math.ceil(E));return{workingWeeks:l,workingDaysSeason:r,avgDailyRemoval:e,avgHourlyRemoval:a,trailersPerDay:i,timeWorkerLoadHours:s,requiredBeachWorkers:d,timeToLoadTrailerMinutes:v,timeToLoadingAreaMinutes:f,totalAtvTimePerLoadMinutes:P,timePerAtvHours:y,requiredAtvs:E,requiredAtvDrivers:D,requiredUnloadWorkers:w,integerLoads:O,integerAtvs:N}}function Q(t,l,r={}){const e=l.integerLoads,a=Number(r.overrideAtvCount),i=Number.isFinite(a)&&a>0?Math.max(1,Math.round(a)):null,o=i??l.integerAtvs,s=[],d=[],v=Array.from({length:o},()=>[]),L=Array.from({length:o},()=>0),T=Math.max(0,t.loadTransferTimeMinutes??0);if(e<=0||o<=0)return{loadMarkers:s,segmentsByAtv:v,totalMinutes:0,numLoads:0,numAtvs:o,loadStates:d};const f=t.beachLengthM/e,q=l.timeToLoadTrailerMinutes,P=t.atvSpeedKmh>0?t.atvSpeedKmh*1e3/60:0;let y=0,E=0;const D=Array.from({length:e},(h,n)=>{const c=n*f,S=(n+1)*f,u=c+f/2;return{loadIndex:n+1,startPosM:c,endPosM:S,centerPosM:u}});s.push(...D.map(h=>h.centerPosM).sort((h,n)=>h-n));const w=[];let O=0,N=e-1,$=!0;for(;O<=N;)$?(w.push({...D[O],crew:"West crew"}),O+=1):(w.push({...D[N],crew:"East crew"}),N-=1),$=!$;return w.length&&e%2===1&&(w[w.length-1].crew="Both crews"),w.forEach(h=>{const n=h.centerPosM,c=h.startPosM,S=h.endPosM,u=Math.min(n,5),b=P>0?n/P:0,A=P>0?Math.max(n-u,0)/P:0,m=P>0?u/P:0;let p=0,C=L[0];for(let W=1;W<o;W+=1)L[W]<C-Number.EPSILON&&(C=L[W],p=W);const g=L[p],k=g+b,x=k+q,I=x+A,V=I+m;let R=0,H=V;H<y&&(R=y-H,H=y);const B=H+T,F=W=>{v[p].push(W),E=Math.max(E,W.endMin)};F({atvId:p,loadId:h.loadIndex,phase:"outbound",startMin:g,endMin:k,startPosM:0,endPosM:n}),F({atvId:p,loadId:h.loadIndex,phase:"loading",startMin:k,endMin:x,startPosM:n,endPosM:n}),A>0?F({atvId:p,loadId:h.loadIndex,phase:"return",startMin:x,endMin:I,startPosM:n,endPosM:u}):F({atvId:p,loadId:h.loadIndex,phase:"return",startMin:x,endMin:x,startPosM:n,endPosM:u}),R>0&&F({atvId:p,loadId:h.loadIndex,phase:"hold",startMin:I,endMin:I+R,startPosM:u,endPosM:u}),F({atvId:p,loadId:h.loadIndex,phase:"approach",startMin:I+R,endMin:H,startPosM:u,endPosM:0}),F({atvId:p,loadId:h.loadIndex,phase:"transfer",startMin:H,endMin:B,startPosM:0,endPosM:0}),L[p]=B,y=B,d.push({startPosM:c,endPosM:S,arrivalMin:k,cleanedAtMinute:x,crew:h.crew,loadId:h.loadIndex})}),{loadMarkers:s,segmentsByAtv:v.map(h=>h.sort((n,c)=>n.startMin-c.startMin)),totalMinutes:E,numLoads:e,numAtvs:o,loadStates:d,overrideAtvCount:i}}function X(){const t=document.querySelector("#app");return t.innerHTML=`
    <section class="controls">
      <div class="control-header">
        <h1>HMB Beach Cleanup Model</h1>
        <p>Set the season-scale inputs from the spreadsheet; the animation shows how one workday plays out with those assumptions.</p>
      </div>
      <div class="controls-groups">
        <div class="control-group">
          <h2>Season Parameters</h2>
          <div class="input-grid" data-section="season"></div>
        </div>
        <div class="control-group">
          <h2>Trailer &amp; Labor</h2>
          <div class="input-grid" data-section="labor"></div>
        </div>
        <div class="control-group">
          <h2>ATV Operations</h2>
          <div class="input-grid" data-section="atv"></div>
          <div class="field override-field">
            <label for="atvOverrideToggle">Override # of ATVs</label>
            <div class="override-controls">
              <select id="atvOverrideToggle">
                <option value="no">No</option>
                <option value="yes">Yes</option>
              </select>
              <input
                type="number"
                id="atvOverrideInput"
                min="1"
                step="1"
                placeholder="Manual count"
              />
            </div>
            <span class="field-note" id="atvOverrideHint"></span>
          </div>
        </div>
      </div>
      <div class="derived-section" id="derivedSection">
        <div class="derived-header">
          <h2>Derived Metrics</h2>
          <button type="button" class="toggle-derived" id="toggleDerived">Hide metrics</button>
        </div>
        <ul class="metrics-list" id="derivedMetrics"></ul>
      </div>
      <div class="status" id="status"></div>
    </section>
    <section class="simulation">
      <div class="canvas-container">
        <canvas id="beachCanvas" width="960" height="520"></canvas>
        <div class="canvas-overlay canvas-overlay-top">
          <span id="timeLabel" class="sim-time">Sim time 00:00</span>
          <div class="speed-slider">
            <input type="range" id="speedSlider" min="1" max="60" step="1" />
            <span id="speedValue"></span>
          </div>
        </div>
        <div class="canvas-overlay canvas-overlay-bottom">
          <span id="detailsLabel"></span>
        </div>
      </div>
    </section>
  `,{canvas:document.querySelector("#beachCanvas"),derivedList:document.querySelector("#derivedMetrics"),status:document.querySelector("#status"),timeLabel:document.querySelector("#timeLabel"),detailsLabel:document.querySelector("#detailsLabel"),derivedSection:document.querySelector("#derivedSection"),derivedToggle:document.querySelector("#toggleDerived"),speedSlider:document.querySelector("#speedSlider"),speedValue:document.querySelector("#speedValue"),atvOverrideToggle:document.querySelector("#atvOverrideToggle"),atvOverrideInput:document.querySelector("#atvOverrideInput"),atvOverrideHint:document.querySelector("#atvOverrideHint")}}function Z(t,l){z.forEach(r=>{const e=document.querySelector(`[data-section="${r.section}"]`);if(!e)return;const a=document.createElement("div");a.className="field";const i=document.createElement("label");i.textContent=r.label;let o;if(r.type==="select"&&Array.isArray(r.options))o=document.createElement("select"),r.options.forEach(s=>{const d=document.createElement("option");d.value=String(s.value),d.textContent=s.label,o.append(d)}),o.value=String(t[r.key]),o.addEventListener("change",()=>{const s=o.value,d=Number(s),L=r.options.every(T=>typeof T.value=="number")&&Number.isFinite(d)?d:s;l(r.key,L)});else{o=document.createElement("input");const s=r.type==="text"?"text":"number";if(o.type=s,r.key==="trailerCapacityM3"?o.value=Number(t[r.key]??0).toFixed(1):o.value=String(t[r.key]??""),r.placeholder&&(o.placeholder=r.placeholder),s==="number"){r.min!==void 0&&(o.min=String(r.min)),r.max!==void 0&&(o.max=String(r.max)),r.step!==void 0&&(o.step=String(r.step));const d=()=>{const v=Number(o.value);Number.isFinite(v)&&(l(r.key,v),r.key==="trailerCapacityM3"&&(o.value=v.toFixed(1)))};r.key==="trailerCapacityM3"?(o.addEventListener("change",d),o.addEventListener("blur",d)):o.addEventListener("input",d)}else o.addEventListener("input",()=>{l(r.key,o.value)})}a.append(i,o),e.append(a)})}function ee(t,l){const r=document.querySelector("#speedSlider"),e=document.querySelector("#speedValue");if(!r||!e)return;const a=i=>{const o=Math.max(1,Math.round(i));e.textContent=`1 s → ${o} min`,l(i)};r.value=String(t.minutesPerSecond),a(t.minutesPerSecond),r.addEventListener("input",()=>{const i=Number(r.value);!Number.isFinite(i)||i<=0||(t.minutesPerSecond=i,a(i))})}function te(t,l,r={}){const e=r.toggle??document.querySelector("#atvOverrideToggle"),a=r.input??document.querySelector("#atvOverrideInput");if(!e||!a)return;const i=s=>{a.disabled=!s,s||(t.atvOverrideCount=null,a.value="")};e.value=t.atvOverrideEnabled?"yes":"no",t.atvOverrideCount!=null&&(a.value=String(t.atvOverrideCount)),i(t.atvOverrideEnabled),e.addEventListener("change",()=>{const s=e.value==="yes";if(t.atvOverrideEnabled=s,s&&!a.value){const d=Number(e.dataset.computedAtvs);Number.isFinite(d)&&d>0&&(t.atvOverrideCount=Math.max(1,Math.round(d)),a.value=String(t.atvOverrideCount))}i(s),l()});const o=()=>{if(!t.atvOverrideEnabled)return;const s=Number(a.value);if(!Number.isFinite(s)||s<=0){t.atvOverrideCount=null,a.value="",l();return}t.atvOverrideCount=Math.round(s),a.value=String(t.atvOverrideCount),l()};a.addEventListener("blur",o),a.addEventListener("keydown",s=>{s.key==="Enter"&&o()})}function ae(t,l,r){t.innerHTML="",Y.forEach(e=>{let a;e.key==="totalMinutes"?a=r.totalMinutes:e.key==="integerAtvs"?a=r.integerAtvs??l.integerAtvs:a=l[e.key];const i=document.createElement("li");i.className="metric-card";const o=document.createElement("span");o.className="label",o.textContent=e.label;const s=document.createElement("span");if(s.className="value",s.textContent=e.format?e.format(a):String(a),i.append(o,s),e.key==="integerAtvs"&&r.overrideAtvs){const d=document.createElement("span");d.className="note";const v=M(r.computedIntegerAtvs,{maximumFractionDigits:0});d.textContent=`Manual override active (computed ${v})`,i.append(d)}else if(e.note){const d=document.createElement("span");d.className="note",d.textContent=e.note,i.append(d)}t.append(i)})}function oe(t,l,r){const e=t.getContext("2d"),a=t.width,i=t.height,o=70;let s={loadMarkers:[],loadStates:[],segmentsByAtv:[],totalMinutes:1,beachLength:_.beachLengthM},d={..._},v=null,L=K;const T=i*.3,f=i*.7;function q(n,c){s={...n,beachLength:c.beachLengthM},d={...c},v=null}function P(n){L=n}function y(n){const c=Math.floor(n/60),S=Math.floor(n%60),u=Math.floor(n%1*60),b=`${String(c).padStart(2,"0")}:${String(S).padStart(2,"0")}:${String(u).padStart(2,"0")}`;l&&(l.textContent=`Sim time ${b}`)}function E(){e.fillStyle="#0f2034",e.fillRect(0,0,a,i);const n=e.createLinearGradient(0,T,0,f);n.addColorStop(0,"rgba(230, 254, 255, 0.08)"),n.addColorStop(.5,"rgba(110, 192, 230, 0.18)"),n.addColorStop(1,"rgba(255, 255, 255, 0.05)"),e.fillStyle=n,e.fillRect(o,T,a-o*2,f-T),e.strokeStyle="rgba(255, 255, 255, 0.25)",e.lineWidth=2,e.beginPath(),e.moveTo(o,f),e.lineTo(a-o,f),e.stroke(),e.save(),e.textAlign="center",e.fillStyle="rgba(255, 255, 255, 0.7)",e.font='16px "Inter", sans-serif';const c=Math.min(i-12,f+28),S=M(d.beachLengthM,{maximumFractionDigits:0});e.fillText(`Beach length = ${S} m`,a/2,c),e.restore()}function D(n){const c=a-o*2,u=(f-T)*.25,b=f-u;s.loadStates.forEach(A=>{const m=o+A.startPosM/s.beachLength*c,p=o+A.endPosM/s.beachLength*c,C=A.arrivalMin,g=A.cleanedAtMinute;if(g<=0||n>=g)return;let k=1;if(n>C){const I=Math.max(g-C,.01),V=Math.min(Math.max((n-C)/I,0),1);k=Math.max(0,1-V)}e.save(),e.globalAlpha=k;const x=e.createLinearGradient(m,b,p,f);x.addColorStop(0,"rgba(121, 85, 72, 0.92)"),x.addColorStop(.5,"rgba(93, 64, 55, 0.95)"),x.addColorStop(1,"rgba(121, 85, 72, 0.92)"),e.fillStyle=x,e.fillRect(m,b,p-m,u),e.restore()})}function w(n,c){if(!n.length)return{position:0,phase:"idle",loadId:null};const S=n[n.length-1].endMin;if(S===0)return{position:0,phase:"idle",loadId:null};let u=c%S;for(let A=0;A<n.length;A+=1){const m=n[A];if(u<m.startMin)return{position:m.startPosM,phase:"idle",loadId:m.loadId};if(u<=m.endMin||m.endMin===m.startMin){const p=m.endMin-m.startMin,C=p>0?(u-m.startMin)/p:1;return{position:m.startPosM+(m.endPosM-m.startPosM)*C,phase:m.phase,loadId:m.loadId}}}const b=n[n.length-1];return{position:b.endPosM,phase:"idle",loadId:b.loadId}}function O(){e.strokeStyle="rgba(255, 255, 255, 0.12)",e.lineWidth=1,e.setLineDash([6,8]),s.loadMarkers.forEach(n=>{const c=o+n/s.beachLength*(a-o*2);e.beginPath(),e.moveTo(c,T),e.lineTo(c,f),e.stroke()}),e.setLineDash([])}function N(n,c,S){e.save();const u=5,b=36,A=14,m=28,p=12,C=8,g=n-b/2,k=c-u-A,x=g+b,I=g-C-m,V=c-u-p+2,R=I+m;e.fillStyle=S,e.fillRect(g,k,b,A),e.fillStyle="rgba(255, 255, 255, 0.2)",e.fillRect(g+6,k+3,12,A-6),e.fillStyle=S,e.fillRect(I,V,m,p),e.strokeStyle="rgba(255, 255, 255, 0.4)",e.lineWidth=2,e.beginPath(),e.moveTo(g,c-u-2),e.lineTo(R,c-u+1),e.stroke();const H="rgba(15, 32, 52, 0.85)",B=[{x:g+8,y:c},{x:x-8,y:c},{x:I+m*.25,y:c+1},{x:R-m*.2,y:c+1}];e.fillStyle=H,B.forEach(F=>{e.beginPath(),e.arc(F.x,F.y,u,0,Math.PI*2),e.fill(),e.fillStyle="rgba(255, 255, 255, 0.25)",e.beginPath(),e.arc(F.x,F.y,u*.4,0,Math.PI*2),e.fill(),e.fillStyle=H}),e.fillStyle="rgba(15, 32, 52, 0.85)",e.fillRect(x-10,k-6,12,6),e.beginPath(),e.moveTo(g+b*.4,k),e.lineTo(g+b*.7,k-8),e.lineTo(g+b*.85,k-8),e.lineTo(g+b*.7,k),e.closePath(),e.fill(),e.restore()}function $(n){const c=[];s.segmentsByAtv.forEach((S,u)=>{const{position:b,phase:A,loadId:m}=w(S,n),p=U[u%U.length],C=o+b/s.beachLength*(a-o*2),g=f-30-u*18;N(C,g,p),e.fillStyle=p,e.font='12px "Inter", sans-serif',e.fillText(`ATV ${u+1}`,C-20,g+22);const x=(m?s.loadStates.find(V=>V.loadId===m):void 0)?.crew??"Crew",I=M(d.trailerCapacityM3,{minimumFractionDigits:1,maximumFractionDigits:1});c.push(`ATV ${u+1}: ${A} load ${m??"—"} (${x}, capacity ${I} m³)`)}),r.textContent=c.join("  •  ")}function h(n){v||(v=n);const c=(n-v)/1e3,S=Math.max(s.totalMinutes,1),u=c*L%S;E(),D(u),O(),$(u),y(u),requestAnimationFrame(h)}return requestAnimationFrame(h),{update:q,updateSpeed:P}}function re(t,l,r){if(l.atvSpeedKmh<=0){t.textContent="Increase ATV speed above zero to animate the transport cycle.";return}if(r.trailersPerDay<=0||r.requiredAtvs<=0){t.textContent="Adjust inputs to produce a non-zero workload for ATVs.";return}t.textContent=""}function ne(){const t={..._},l={...j},{canvas:r,derivedList:e,status:a,timeLabel:i,detailsLabel:o,derivedSection:s,derivedToggle:d,atvOverrideToggle:v,atvOverrideInput:L,atvOverrideHint:T}=X(),f=oe(r,i,o);let q=!1;function P(){const y=J(t),E=l.atvOverrideEnabled?l.atvOverrideCount:null,D=Q(t,y,{overrideAtvCount:E}),w={totalMinutes:D.totalMinutes,integerAtvs:D.numAtvs,overrideAtvs:D.overrideAtvCount!=null,computedIntegerAtvs:y.integerAtvs};if(ae(e,y,w),re(a,t,y),f.update(D,t),T){const O=M(y.integerAtvs,{maximumFractionDigits:0});if(D.overrideAtvCount!=null){const N=M(D.overrideAtvCount,{maximumFractionDigits:0});T.textContent=`Manual override active (${N} ATVs, computed ${O}).`}else T.textContent=`Using computed requirement (${O} ATVs).`}if(v&&(v.dataset.computedAtvs=String(y.integerAtvs)),L){const O=M(y.integerAtvs,{maximumFractionDigits:0});(!l.atvOverrideEnabled||l.atvOverrideCount==null)&&(L.placeholder=`Computed ${O}`)}}Z(t,(y,E)=>{t[y]=E,P()}),ee(l,y=>{f.updateSpeed(y)}),te(l,P,{toggle:v,input:L}),d.addEventListener("click",()=>{q=!q,s.classList.toggle("collapsed",q),d.textContent=q?"Show metrics":"Hide metrics"}),P()}ne();
